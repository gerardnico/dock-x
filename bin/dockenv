#!/usr/bin/env bash
# @name dockenv documentation
# @brief Automated Docker Commands driven by environment variables
# @description
#    Set environment variables and run derived docker command
#


set -euo pipefail
source bashlib-echo.sh
source bashlib-error.sh
source bashlib-command.sh
error::set_trap


# @internal
# @description A exec to run an interactive command such as bash in the docker container
dockenv_shell(){

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCKER_USER=${DOCKER_USER:-}
  if [ "$DOCKER_PORTS" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCKER_USER")
  fi

  command::echo_eval "docker exec \
    ${DOCKER_USER_ARG[*]} \
    -ti \
    ${DOCKER_CONTAINER:-dockenv} \
    ${DOCKER_SHELL:-bash} ${*}"


}

# @internal
dockenv_build(){

  # Docker needs to be started from the project root
  # to mount the scripts
  pushd "$PWD"

  command::echo_eval "docker build . \
    ${*} \
    -t ${DOCKER_REGISTRY:-docker.io}/${DOCKER_NAMESPACE}/${DOCKER_NAME}:$DOCKER_TAG
  "

  popd

}

# @internal
# @description A exec to run bash and other command into the container
dockenv_exec(){


  if [ "$1" == "" ]; then
    echo "Usage: $(basename "$0") exec <command>"
    echo::err "A command is mandatory"
    exit 1
  fi

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCKER_USER=${DOCKER_USER:-}
  if [ "$DOCKER_PORTS" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCKER_USER")
  fi


  command::echo_eval "docker exec \
    ${DOCKER_USER_ARG[*]} \
    -ti \
    ${DOCKER_CONTAINER:-dockenv} \
    ${*}"

}

# @internal
# @description Get the logs
dockenv_logs(){

  command::echo_eval "docker logs \
    -f ${DOCKER_CONTAINER:-dockenv}"

}

# @internal
# @description Push the image to the registry
dockenv_push(){

  command::echo_eval "docker push ${DOCKER_REGISTRY:-docker.io}/${DOCKER_NAMESPACE}/${DOCKER_NAME}:$DOCKER_TAG"

}

# @internal
# @description Run the image
dockenv_run(){

  # Docker needs to be started from the project root
  # to mount the volumes
  pushd "$PWD"

  # Get the env
  declare -a DOCKER_ENV_ARGS=()
  DIRENV_EXPORTED_ENVS=${DIRENV_EXPORTED_ENVS:-}
  if [ "$DIRENV_EXPORTED_ENVS" != "" ]; then
    IFS=',' read -ra DIRENV_EXPORTED_KEYS_AS_ARRAY <<< "$DIRENV_EXPORTED_ENVS"
    for ENV in "${DIRENV_EXPORTED_KEYS_AS_ARRAY[@]}"; do
        # Filter out all docker variable
        if [[ $ENV == DOCKER* ]]; then
            continue
        fi
        if [[ -v $ENV ]]; then
            DOCKER_ENV_ARGS+=("-e")
            DOCKER_ENV_ARGS+=("$ENV=${!ENV}")
        fi
    done
  fi

  # Set the ports
  declare -a DOCKER_PORTS_ARGS=()
  DOCKER_PORTS=${DOCKER_PORTS:-}
  if [ "$DOCKER_PORTS" != "" ]; then
    IFS=',' read -ra DOCKER_PORTS_AS_ARRAY <<< "$DOCKER_PORTS"
    for DOCKER_PORT_MAPPING in "${DOCKER_PORTS_AS_ARRAY[@]}"; do
        if [[ $DOCKER_PORT_MAPPING != "" ]]; then
            DOCKER_PORTS_ARGS+=("-p")
            DOCKER_PORTS_ARGS+=("$DOCKER_PORT_MAPPING")
        fi
    done
  fi

  # Set the groups
  declare -a DOCKER_USER_GROUPS_ARGS=()
  DOCKER_USER_GROUPS=${DOCKER_USER_GROUPS:-}
  if [ "$DOCKER_USER_GROUPS" != "" ]; then
    IFS=',' read -ra DOCKER_USER_GROUPS_AS_ARRAY <<< "$DOCKER_USER_GROUPS"
    for DOCKER_USER_GROUP in "${DOCKER_USER_GROUPS_AS_ARRAY[@]}"; do
        if [[ $DOCKER_USER_GROUP != "" ]]; then
            DOCKER_USER_GROUPS_ARGS+=("--group-add")
            DOCKER_USER_GROUPS_ARGS+=("$DOCKER_USER_GROUP")
        fi
    done
  fi

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCKER_USER=${DOCKER_USER:-}
  if [ "$DOCKER_PORTS" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCKER_USER")
  fi


  declare -a DOCKER_OPTIONS=()
  declare -a DOCKER_COMMAND_ARGS=()
  # Parsing
  # We don't do a loop because the drive
  # is shift
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -*)
      if [ ${#DOCKER_COMMAND_ARGS[@]} -eq 0 ]; then
        echo "Options flag ($1) found"
        DOCKER_OPTIONS+=("$1")
        shift
        echo "Options value ($1) found"
        DOCKER_OPTIONS+=("$1")
      else
        # An option for the command
        echo "Command/Arg ($1) found"
        DOCKER_COMMAND_ARGS+=("$1")
      fi
      ;;
    *)
      echo "Command/Arg ($1) found"
      DOCKER_COMMAND_ARGS+=("$1")
      ;;
    esac
    shift
  done


  # Start the container
  command::echo_eval "docker run \
    --name ${DOCKER_CONTAINER:-dockenv} \
    ${DOCKER_USER_ARG[*]} \
    ${DOCKER_USER_GROUPS_ARGS[*]} \
    --rm \
    ${DOCKER_PORTS_ARGS[*]} \
    ${DOCKER_ENV_ARGS[*]} \
    ${DOCKER_OPTIONS[*]} \
    $(get_image_name) \
    ${DOCKER_COMMAND_ARGS[*]}"

  popd

}

# @internal
# @description return the image name
get_image_full_name(){
  DOCKER_REGISTRY_PART=''
  DOCKER_REGISTRY=${DOCKER_REGISTRY:-}
  if [ "$DOCKER_REGISTRY" != "" ]; then
    DOCKER_REGISTRY_PART="${DOCKER_REGISTRY}/"
  fi
  echo "${DOCKER_REGISTRY_PART}${DOCKER_NAMESPACE:-DOCKER_NAMESPACE}/${DOCKER_NAME:-DOCKER_NAME}:${DOCKER_TAG:-latest}"
}

# @internal
dockenv_stop(){

  command::echo_eval "docker stop ${DOCKER_CONTAINER:-dockenv}"

}

# @internal
# @description Print the env
# @args $1 A marge can be specified with a number of blank space
dockenv_env(){

  MARGE=${1:-}

  echo "${MARGE}Image Registry    : DOCKER_REGISTRY=${DOCKER_REGISTRY:-docker.io}"
  echo "${MARGE}Image Namespace   : DOCKER_NAMESPACE=${DOCKER_NAMESPACE:-}"
  echo "${MARGE}Image Name        : DOCKER_NAME=${DOCKER_NAME:-}"
  echo "${MARGE}Image Tag         : DOCKER_TAG=${DOCKER_TAG:-latest}"
  echo "${MARGE}Container Name    : DOCKER_CONTAINER=${DOCKER_CONTAINER:-dockenv}"
  echo "${MARGE}Container User    : DOCKER_USER=${DOCKER_USER:-}"
  echo "${MARGE}Container Port    : DOCKER_PORTS=${DOCKER_PORTS:-}"
  echo "${MARGE}Container Shell   : DOCKER_SHELL=${DOCKER_SHELL:-/bin/bash}"



}

# @internal
dockenv_usage(){
   FULL_IMAGE_NAME=$(get_image_full_name)
cat << EOT

  Dockenv - Automated Docker Commands driven by environment variables

  Usage: $(basename "$0") <command> <opts>

  Commands:
    build                           Build the image $FULL_IMAGE_NAME
    exec                            Exec into the container ${DOCKER_CONTAINER:-DOCKER_CONTAINER}
    env                             Print the actual dockenv env that drives the docker command
    shell                           Start the ${DOCKER_SHELL:-bash} shell into the container ${DOCKER_CONTAINER:-DOCKER_CONTAINER}
    logs                            Logs of the container ${DOCKER_CONTAINER:-DOCKER_CONTAINER}
    push                            Push the image $FULL_IMAGE_NAME

  Global Options:
    -h --help                       Show this help message

  Actual Env:
$(dockenv_env "    " 2>&1)

EOT
}


# Assign the first argument to a string
COMMAND="${1:-}"
if [ "$COMMAND" = "" ]; then
    dockenv_usage
    echo::err "A command is mandatory"
    exit 1
fi
shift  # Remove the first argument from the argument list

# Help Asked should not fail for the doc
# We test if before the error warning
if [[ $COMMAND =~ "help"|"-h"|"--help" ]]; then
  dockenv_usage
  exit
fi

# Mandatory Env
DOCKER_NAMESPACE=${DOCKER_NAMESPACE:-}
if [ "$DOCKER_NAMESPACE" = "" ]; then
  echo::err "The environment variable DOCKER_NAMESPACE is not set. The image namespace is unknown."
fi
DOCKER_NAME=${DOCKER_NAME:-}
if [ "$DOCKER_NAME" = "" ]; then
  echo::err "The environment variable DOCKER_NAME is not set. The image name is unknown."
fi

# Assign the rest of the arguments to an array
declare -a ARGS=()
ARGS=("$@")


 case $COMMAND in
  "build")
      dockenv_build "${ARGS[@]}"
      ;;
  "env")
      dockenv_env "${ARGS[@]}"
      ;;
  "exec")
      dockenv_exec "${ARGS[@]}"
      ;;
  "logs")
      dockenv_logs "${ARGS[@]}"
      ;;
  "push")
      dockenv_push "${ARGS[@]}"
      ;;
  "run")
      dockenv_run "${ARGS[@]}"
      ;;
  "shell")
      dockenv_shell "${ARGS[@]}"
      ;;
  "help"|"-h"|"--help")
      dockenv_usage "${ARGS[@]}"
      ;;
  *)
    dockenv_usage
    echo::err "Command $COMMAND is unknown"
    exit 1
 esac
