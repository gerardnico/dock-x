#!/usr/bin/env bash

set -euo pipefail

# Docker needs to be started from the project root
# to mount the volumes
pushd "$PWD"

# Get the env
declare -a DOCKER_ENV_ARGS=()
DIRENV_EXPORTED_ENVS=${DIRENV_EXPORTED_ENVS:-}
if [ "$DIRENV_EXPORTED_ENVS" != "" ]; then
  IFS=',' read -ra DIRENV_EXPORTED_KEYS_AS_ARRAY <<< "$DIRENV_EXPORTED_ENVS"
  for ENV in "${DIRENV_EXPORTED_KEYS_AS_ARRAY[@]}"; do
      # Filter out all docker variable
      if [[ $ENV == DOCKER* ]]; then
          continue
      fi
      if [[ -v $ENV ]]; then
          DOCKER_ENV_ARGS+=("-e")
          DOCKER_ENV_ARGS+=("$ENV=${!ENV}")
      fi
  done
fi

# Set the ports
declare -a DOCKER_PORTS_ARGS=()
DOCKER_PORTS=${DOCKER_PORTS:-}
if [ "$DOCKER_PORTS" != "" ]; then
  IFS=',' read -ra DOCKER_PORTS_AS_ARRAY <<< "$DOCKER_PORTS"
  for DOCKER_PORT_MAPPING in "${DOCKER_PORTS_AS_ARRAY[@]}"; do
      if [[ $DOCKER_PORT_MAPPING != "" ]]; then
          DOCKER_PORTS_ARGS+=("-p")
          DOCKER_PORTS_ARGS+=("$DOCKER_PORT_MAPPING")
      fi
  done
fi

# Set the groups
declare -a DOCKER_USER_GROUPS_ARGS=()
DOCKER_USER_GROUPS=${DOCKER_USER_GROUPS:-}
if [ "$DOCKER_USER_GROUPS" != "" ]; then
  IFS=',' read -ra DOCKER_USER_GROUPS_AS_ARRAY <<< "$DOCKER_USER_GROUPS"
  for DOCKER_USER_GROUP in "${DOCKER_USER_GROUPS_AS_ARRAY[@]}"; do
      if [[ $DOCKER_USER_GROUP != "" ]]; then
          DOCKER_USER_GROUPS_ARGS+=("--group-add")
          DOCKER_USER_GROUPS_ARGS+=("$DOCKER_USER_GROUP")
      fi
  done
fi

# The user
declare -a DOCKER_USER_ARG=()
DOCKER_USER=${DOCKER_USER:-}
if [ "$DOCKER_PORTS" != "" ]; then
  DOCKER_USER_ARG+=("--user")
  DOCKER_USER_ARG+=("$DOCKER_USER")
fi


declare -a DOCKER_OPTIONS=()
declare -a DOCKER_COMMAND_ARGS=()
# Parsing
# We don't do a loop because the drive
# is shift
while [[ $# -gt 0 ]]; do
  case "$1" in
  -*)
    if [ ${#DOCKER_COMMAND_ARGS[@]} -eq 0 ]; then
      echo "Options flag ($1) found"
      DOCKER_OPTIONS+=("$1")
      shift
      echo "Options value ($1) found"
      DOCKER_OPTIONS+=("$1")
    else
      # An option for the command
      echo "Command/Arg ($1) found"
      DOCKER_COMMAND_ARGS+=("$1")
    fi
    ;;
  *)
    echo "Command/Arg ($1) found"
    DOCKER_COMMAND_ARGS+=("$1")
    ;;
  esac
  shift
done


# Start the container
COMMAND="docker run \
  --name ${DOCKER_CONTAINER:-dockenv} \
  ${DOCKER_USER_ARG[*]} \
  ${DOCKER_USER_GROUPS_ARGS[*]} \
  --rm \
  ${DOCKER_PORTS_ARGS[*]} \
  ${DOCKER_ENV_ARGS[*]} \
  ${DOCKER_OPTIONS[*]} \
  ${DOCKER_REGISTRY:-docker.io}/${DOCKER_NAMESPACE}/${DOCKER_NAME}:$DOCKER_TAG \
  ${DOCKER_COMMAND_ARGS[*]}"

echo "Executing: $COMMAND"
eval "$COMMAND"
popd
