#!/usr/bin/env bash


set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-command.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-command.sh"



# @internal
# @description A exec to run an interactive command such as bash in the docker container
dock_x_shell(){

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCK_X_USER=${DOCK_X_USER:-}
  if [ "$DOCK_X_USER" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCK_X_USER")
  fi
  DOCK_X_CONTAINER=${DOCK_X_CONTAINER:-dock-x}
  DOCK_X_SHELL=${DOCK_X_SHELL:-/usr/bin/env bash}
  # Note the docker command fail if the container does not exist
  # if the container exists, it returns true or false
  if ! RUNNING_STATE="$(docker container inspect -f '{{.State.Running}}' "$DOCK_X_CONTAINER" 2>/dev/null)"; then
    # container does not exists
    RUNNING_STATE="false"
  else
    # container exists
    if [ "$RUNNING_STATE" == "false" ]; then
      echo::warn "The container ($DOCK_X_CONTAINER) exists, was not running. We deleted it."
      docker remove "$DOCK_X_CONTAINER" >/dev/null # return tne name of the deleted container
    fi
  fi
  if [ "$RUNNING_STATE" == "false" ]; then

      echo::warn "The container ($DOCK_X_CONTAINER) is not running. (Env: DOCK_X_CONTAINER) "
      echo::warn "Executing an ephemeral container image with a shell"
      dock_x_run --rm --tty --interactive "${DOCK_X_SHELL}"
      return

  fi

  command::echo_eval "docker exec \
    ${DOCKER_USER_ARG[*]} \
    -ti \
    ${DOCK_X_CONTAINER} \
    ${DOCK_X_SHELL} ${*}"


}


# Build just set the t parameter
#
# Example for mono-repo build
# dock-x build -f Dockerfile ..
#
dock_x_build(){

  # Set the internal field separator to a colon, but only for the command
  BUILD_ARGS=()
  IFS=' ' read -r -a BUILD_ARGS <<< "${DOCK_X_BUILD_OPTIONS:-}"
  BUILD_ARGS=("${BUILD_ARGS[@]}" "$@")
  if [ "${#BUILD_ARGS[@]}" -eq 0 ]; then
    BUILD_ARGS+=(".")
  fi

  command::echo_eval "docker build \
    -t ${DOCK_X_REGISTRY:-docker.io}/${DOCK_X_NAMESPACE}/${DOCK_X_NAME}:$DOCK_X_TAG \
    ${BUILD_ARGS[*]}
  "

}

# @internal
# @description A exec to run bash and other command into the container
dock_x_exec(){


  if [ "$1" == "" ]; then
    echo "Usage: $(basename "$0") exec <command>"
    echo::err "A command is mandatory"
    exit 1
  fi

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCK_X_USER=${DOCK_X_USER:-}
  DOCK_X_PORTS=${DOCK_X_PORTS:-}
  if [ "$DOCK_X_PORTS" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCK_X_USER")
  fi


  command::echo_eval "docker exec \
    ${DOCKER_USER_ARG[*]} \
    -ti \
    ${DOCK_X_CONTAINER:-dock-x} \
    ${*}"

}

# @internal
# @description Get the logs
dock_x_logs(){

  command::echo_eval "docker logs \
    -f ${DOCK_X_CONTAINER:-dock-x}"

}

# @internal
# @description Push the image to the registry
dock_x_push(){

  command::echo_eval "docker push ${DOCK_X_REGISTRY:-docker.io}/${DOCK_X_NAMESPACE}/${DOCK_X_NAME}:$DOCK_X_TAG"

}

# @internal
# @description Run the image
# Note Docker needs to be started from the project root
# to mount the volumes
dock_x_run(){

  # Get the env
  declare -a DOCKER_ENV_ARGS=()
  DIRENV_EXPORTED_ENVS=${DIRENV_EXPORTED_ENVS:-}
  if [ "$DIRENV_EXPORTED_ENVS" != "" ]; then
    IFS=',' read -ra DIRENV_EXPORTED_KEYS_AS_ARRAY <<< "$DIRENV_EXPORTED_ENVS"
    for ENV in "${DIRENV_EXPORTED_KEYS_AS_ARRAY[@]}"; do
        # Filter out all docker variable
        if [[ $ENV == DOCKER* ]]; then
            continue
        fi
        if [[ -v $ENV ]]; then
            DOCKER_ENV_ARGS+=("-e")
            DOCKER_ENV_ARGS+=("$ENV=${!ENV}")
        fi
    done
  fi

  # Set the ports
  declare -a DOCKER_PORTS_ARGS=()
  DOCK_X_PORTS=${DOCK_X_PORTS:-}
  if [ "$DOCK_X_PORTS" != "" ]; then
    IFS=',' read -ra DOCKER_PORTS_AS_ARRAY <<< "$DOCK_X_PORTS"
    for DOCKER_PORT_MAPPING in "${DOCKER_PORTS_AS_ARRAY[@]}"; do
        if [[ $DOCKER_PORT_MAPPING != "" ]]; then
            DOCKER_PORTS_ARGS+=("-p")
            DOCKER_PORTS_ARGS+=("$DOCKER_PORT_MAPPING")
        fi
    done
  fi

  # Set the groups
  declare -a DOCKER_USER_GROUPS_ARGS=()
  DOCK_X_USER_GROUPS=${DOCK_X_USER_GROUPS:-}
  if [ "$DOCK_X_USER_GROUPS" != "" ]; then
    IFS=',' read -ra DOCKER_USER_GROUPS_AS_ARRAY <<< "$DOCK_X_USER_GROUPS"
    for DOCKER_USER_GROUP in "${DOCKER_USER_GROUPS_AS_ARRAY[@]}"; do
        if [[ $DOCKER_USER_GROUP != "" ]]; then
            DOCKER_USER_GROUPS_ARGS+=("--group-add")
            DOCKER_USER_GROUPS_ARGS+=("$DOCKER_USER_GROUP")
        fi
    done
  fi

  # The user
  declare -a DOCKER_USER_ARG=()
  DOCK_X_USER=${DOCK_X_USER:-}
  if [ "$DOCK_X_USER" != "" ]; then
    DOCKER_USER_ARG+=("--user")
    DOCKER_USER_ARG+=("$DOCK_X_USER")
  fi


  DOCKER_OPTIONS=()
  IFS=' ' read -r -a DOCKER_COMMAND_ARGS <<< "${DOCK_X_RUN_CMD:-}"
  # Parsing
  # We don't do a loop because the drive
  # is shift
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --rm)
      # Nothing already added
      ;;
    --user)
      shift
      echo::debug "User flag ($1) found"
      DOCKER_USER_ARG+=("$1")
      ;;
    --tty|-t|--interactive|-i|-d|--detach|--privileged)
      echo::debug "Emtpy Option flag ($1) found"
      DOCKER_OPTIONS+=("$1")
      ;;
    -v|--volume)
      echo::debug "Value Option flag ($1) found"
      DOCKER_OPTIONS+=("$1")
      shift
      echo::debug "Value ($1) found"
      DOCKER_OPTIONS+=("$1")
      ;;
    -*)
      echo::err "Unknown option $1"
      echo::err "use the DOCK_X_RUN_OPTIONS and DOCK_X_RUN_CMD env variable instead"
      exit 1
      ;;
    *)
      echo::debug "Command/Arg ($1) found"
      DOCKER_COMMAND_ARGS+=("$1")
      ;;
    esac
    shift
  done


  # Start the container
  command::echo_eval "docker run \
    --name ${DOCK_X_CONTAINER:-dock-x} \
    --rm \
    ${DOCKER_USER_ARG[*]} \
    ${DOCKER_USER_GROUPS_ARGS[*]} \
    ${DOCKER_PORTS_ARGS[*]} \
    ${DOCKER_ENV_ARGS[*]} \
    ${DOCKER_OPTIONS[*]} \
    ${DOCK_X_RUN_OPTIONS:-} \
    $(get_image_full_name) \
    ${DOCKER_COMMAND_ARGS[*]}"

}

# @internal
# @description return the image name
get_image_full_name(){
  DOCKER_REGISTRY_PART=''
  # empty is the same as docker.io
  DOCK_X_REGISTRY=${DOCK_X_REGISTRY:-}
  if [ "$DOCK_X_REGISTRY" != "" ]; then
    DOCKER_REGISTRY_PART="${DOCK_X_REGISTRY}/"
  fi
  echo "${DOCKER_REGISTRY_PART}${DOCK_X_NAMESPACE:-DOCK_X_NAMESPACE}/${DOCK_X_NAME:-DOCK_X_NAME}:${DOCK_X_TAG:-latest}"
}


dock_x_stop(){

  command::echo_eval "docker stop ${DOCK_X_CONTAINER:-dock-x}"

}

# @internal
# @description Print the env
# @args $1 A marge can be specified with a number of blank space
dock_x_env(){

  MARGE=${1:-}

  echo "${MARGE}* Image Registry    : DOCK_X_REGISTRY=${DOCK_X_REGISTRY:-docker.io}"
  echo "${MARGE}* Image Namespace   : DOCK_X_NAMESPACE=${DOCK_X_NAMESPACE:-}"
  echo "${MARGE}* Image Name        : DOCK_X_NAME=${DOCK_X_NAME:-}"
  echo "${MARGE}* Image Tag         : DOCK_X_TAG=${DOCK_X_TAG:-latest}"
  echo "${MARGE}* Container Name    : DOCK_X_CONTAINER=${DOCK_X_CONTAINER:-dock-x}"
  echo "${MARGE}* Container User    : DOCK_X_USER=${DOCK_X_USER:-}"
  echo "${MARGE}* Container Port    : DOCK_X_PORTS=${DOCK_X_PORTS:-}"
  echo "${MARGE}* Container Shell   : DOCK_X_SHELL=${DOCK_X_SHELL:-/usr/bin/env bash}"
  echo "${MARGE}* Run options       : DOCK_X_RUN_OPTIONS=${DOCK_X_RUN_OPTIONS:-}"



}

# @internal
synopsis(){
   FULL_IMAGE_NAME=$(get_image_full_name)
cat << EOT

$(basename "$0") - Automated Docker Commands driven by environment variables

Usage:
\`\`\`bash
$(basename "$0") command opts
\`\`\`

Commands:

* build                           Build the image $FULL_IMAGE_NAME. You still needs to give the context as argument.
* exec                            Exec into the container ${DOCK_X_CONTAINER:-DOCK_X_CONTAINER}
* env                             Print the actual $(basename "$0") env that drives the docker command
* shell                           Start a ${DOCK_X_SHELL:-bash} shell into the container ${DOCK_X_CONTAINER:-DOCK_X_CONTAINER}
* logs                            Logs of the container ${DOCK_X_CONTAINER:-DOCK_X_CONTAINER}
* push                            Push the image $FULL_IMAGE_NAME
* push                            Stop the container ${DOCK_X_CONTAINER:-DOCK_X_CONTAINER}

Global Options:

* -h --help                       Show this help message

Actual Env:

$(dock_x_env "" 2>&1)

EOT
}


# Assign the first argument to a string
COMMAND="${1:-}"
if [ "$COMMAND" = "" ]; then
    synopsis
    echo::err "A command is mandatory"
    exit 1
fi
shift  # Remove the first argument from the argument list

# Help Asked should not fail for the doc
# We test if before the error warning
if [[ $COMMAND =~ help|-h|--help ]]; then
  doc::help synopsis
  exit
fi

if [[ $COMMAND == "synopsis" ]]; then
  synopsis
  exit
fi



# Mandatory Env
DOCK_X_NAMESPACE=${DOCK_X_NAMESPACE:-}
if [ "$DOCK_X_NAMESPACE" = "" ]; then
  echo::err "The environment variable DOCK_X_NAMESPACE is not set. The image namespace is unknown."
fi
DOCK_X_NAME=${DOCK_X_NAME:-}
if [ "$DOCK_X_NAME" = "" ]; then
  echo::err "The environment variable DOCK_X_NAME is not set. The image name is unknown."
fi

# Assign the rest of the arguments to an array
declare -a ARGS=()
ARGS=("$@")


case $COMMAND in
"build")
    dock_x_build "${ARGS[@]}" || error::exit $?
    ;;
"env")
    dock_x_env "${ARGS[@]}" || error::exit $?
    ;;
"exec")
    dock_x_exec "${ARGS[@]}" || error::exit $?
    ;;
"logs")
    dock_x_logs "${ARGS[@]}" || error::exit $?
    ;;
"push")
    dock_x_push "${ARGS[@]}" || error::exit $?
    ;;
"run")
    dock_x_run "${ARGS[@]}" || error::exit $?
    ;;
"stop")
    dock_x_stop
    ;;
"shell")
    dock_x_shell "${ARGS[@]}" || error::exit $?
    ;;
*)
  doc::help synopsis
  echo::err "Command $COMMAND is unknown"
  exit 1
esac
